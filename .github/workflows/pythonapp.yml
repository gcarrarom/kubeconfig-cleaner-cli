# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pip install pytest
        python -m pytest
        
  release:
    if: "!contains(github.event.head_commit.message, 'skip cd')"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Retrieving the Version
      run: | 
        echo "Getting version from the setup.py file..."
        ApplicationVersion=$(cat setup.py | grep version | cut -d '=' -f 2 | cut -d "'" -f 2)
        echo "setup.py file version: $ApplicationVersion"
        echo "Testing if this version already exists in GitHub..."
        echo "Get the tags first..."
        tags=$(curl https://api.github.com/repos/gcarrarom/kubeconfig-cleaner-cli/tags)
        echo "check if there's a match on the version.."
        Match=$(echo $tags | jq -r ".[] | select(.name == \"v$ApplicationVersion\")")

        if [[ -z "$Match" ]]; then
          echo "All good, this doesn't match any old versions"
        else
          echo "Nope, we have this already... try choosing another one ;)"
          exit 100
        fi
        echo "Version to be used: $ApplicationVersion"
        echo "::set-env name=VERSION::$ApplicationVersion"
    - name: Github Release
      uses: elgohr/Github-Release-Action@v3.1
      with:
        release: "v${{ env.VERSION }}"
    - name: Pip Upload
      uses: onichandame/pip-upload-action@0.0.1
      with:
        username: gui.martins
        password: ${{secrets.PYPI_PASS}}
