# Python package

# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master
- dev/*
- beta/*

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python36:
      python.version: '3.6'
    Python37:
      python.version: '3.7'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    branch="$(Build.SourceBranchName)"
    tags=$(curl https://api.github.com/repos/gcarrarom/kubeconfig-cleaner-cli/tags)
    if [[ $branch == *"dev"* ]]; then
      workingOn=$(echo $tags | jq -r "[.[] | select(.name | contains(\"$(echo $branch | cut -d '/' -f 2)\"))] | sort_by(.name) | reverse | .[0].name ")
      masterVersion=$(echo $workingOn | cut -d 'v' -f 2 | cut -d '.' -f 1)
      devVersion=$(echo $workingOn | cut -d 'v' -f 2 | cut -d '.' -f 2)
      devVersion=$(($devVersion + 1))
      ApplicationVersion="$masterVersion.$devVersion.0"
    elif [[ $branch == *"beta"* ]]; then
      workingOn=$(echo $tags | jq -r "[.[] | select(.name | contains(\"$(echo $branch | cut -d '/' -f 2)\"))] | sort_by(.name) | reverse | .[0].name ")
      masterVersion=$(echo $workingOn | cut -d 'v' -f 2 | cut -d '.' -f 1)
      devVersion=$(echo $workingOn | cut -d 'v' -f 2 | cut -d '.' -f 2)
      betaVersion=$(echo $workingOn | cut -d 'v' -f 2 | cut -d '.' -f 3)
      betaVersion=$(($betaVersion + 1))
      ApplicationVersion="$masterVersion.$devVersion.$betaVersion"
    elif [[ $branch == "master" ]]; then
      workingOn=$(echo $tags | jq -r "sort_by(.name) | reverse | .[0].name ")
      version=$(echo $workingOn | cut -d 'v' -f 2 | cut -d '.' -f 1)
      newVersion=$(($version + 1))
      ApplicationVersion="$newVersion.0.0"
    fi
    echo "##vso[task.setvariable variable=ApplicationVersion]$ApplicationVersion"
  displayName: 'Get application Version'

- script: |
    python -m pip install --upgrade pip
    pip install pytest-cov
    pip install .
  displayName: 'Install dependencies'

- script: |
    pip install pytest pytest-azurepipelines
    pytest --junitxml=$(Build.StagingDirectory)/testResults.xml --cov=kcleaner --cov-report=html --cov-report=xml
  displayName: 'pytest'

- task: PublishTestResults@2
  displayName: 'Publish test results'
  inputs:
    testResultsFiles: '$(Build.StagingDirectory)/testResults.xml'
    testRunTitle: Tests

- task: PublishCodeCoverageResults@1
  displayName: "publishing code coverage"
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/test-cov.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/htmlcov'
    additionalCodeCoverageFiles: '$(System.DefaultWorkingDirectory)/htmlcov/**'
    failIfCoverageEmpty: true

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: '*.py'
    TargetFolder: '$(Build.SourcesDirectory)/toStage'
    CleanTargetFolder: true
  displayName: 'Copying Python files to the Staging directory'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/toStage'
    includeRootFolder: true
    archiveType: 'tar'
    archiveFile: '$(Build.ArtifactStagingDirectory)/kcleaner-v$(ApplicationVersion)-$(Build.BuildNumber).tar.gz'
    replaceExistingArchive: true
  displayName: 'Archiving release files to tar.gz file'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publishing Artifacts'